<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Security.Principal;
using System.Text;
using System.Threading.Tasks;
using <%= namespace %>.Client.Models;
using <%= namespace %>.Client.Services;
using Microsoft.AspNetCore.Components.Authorization;

namespace <%= namespace %>.Client.Test.Helpers
{
    public class MockAuthenticationService : AuthenticationStateProvider,IAuthenticationService
    {
        public ClaimsIdentity Identity { get; set; }

        public MockAuthenticationService()
        {
            
        }

        public MockAuthenticationService(ClaimsIdentity identity)
        {
            Identity = identity;
        }

        public override Task<AuthenticationState> GetAuthenticationStateAsync()
        {
            return Task.FromResult(new AuthenticationState(new ClaimsPrincipal(Identity)));
        }

        public bool IsAuthenticated
        {
            get => true;
            set => throw new NotImplementedException();
        }

        public UserModel CurrentUser
        {
            get => new UserModel(){Login = Identity?.Claims.FirstOrDefault(c => c.Type.Equals(ClaimTypes.NameIdentifier)).Value};
            set => throw new NotImplementedException();
        }

        public JwtToken JwtToken
        {
            get => new JwtToken();
            set => throw new NotImplementedException();
        }

        public virtual async Task<bool> SignIn(LoginModel loginModel)
        {
            throw new NotImplementedException();
        }

        public virtual async Task SignOut()
        {
            throw new NotImplementedException();
        }
    }
}

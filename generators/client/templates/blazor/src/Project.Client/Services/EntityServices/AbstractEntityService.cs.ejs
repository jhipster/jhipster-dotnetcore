<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Json;
using System.Threading.Tasks;
using <%= namespace %>.Client.Models;
using Microsoft.AspNetCore.Components.Authorization;

namespace <%= namespace %>.Client.Services.EntityServices
{
    public class AbstractEntityService<T> where T : class
    {
        private const string AuthorizationHeader = "Authorization";
        private readonly AuthenticationStateProvider _authenticationStateProvider;

        protected readonly HttpClient _httpClient;

        protected JwtToken JwtToken { get; set; }
        protected string BaseUrl { get; }

        public AbstractEntityService(HttpClient httpClient, AuthenticationStateProvider authenticationStateProvider, string baseUrl)
        {
            _httpClient = httpClient;
            _authenticationStateProvider = authenticationStateProvider;
            _httpClient.BaseAddress = new Uri(Configuration.BaseUri);
            var authenticationService = _authenticationStateProvider as IAuthenticationService;
            JwtToken = authenticationService?.JwtToken;
            if (JwtToken != null)
            {
                _httpClient.DefaultRequestHeaders.Add(AuthorizationHeader, $"Bearer {JwtToken.IdToken}");
            }
            BaseUrl = baseUrl;
        }

        public virtual async Task<IList<T>> GetAll()
        {
            return await _httpClient.GetFromJsonAsync<IList<T>>(BaseUrl);
        }

        public virtual async Task<T> Get(string id)
        {
            return await _httpClient.GetFromJsonAsync<T>($"{BaseUrl}/{id}");
        }

        public virtual async Task Add(T model)
        {
            await _httpClient.PostAsJsonAsync(BaseUrl,model);
        }
        
        public virtual async Task Update(T model)
        {
            await _httpClient.PutAsJsonAsync(BaseUrl, model);
        }

        public virtual async Task Delete(string id)
        {
            await _httpClient.DeleteAsync($"{BaseUrl}/{id}");
        }

    }
}

<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
# <%= baseName %>
<%_
let DOCUMENTATION_ARCHIVE_URL = `${DOCUMENTATION_URL + DOCUMENTATION_ARCHIVE_PATH}v${jhipsterVersion}`;
_%>
This application was generated using JHipster <%= jhipsterVersion %> and JHipster .Net Core 1.0.0, you can find documentation and help at [<%= DOCUMENTATION_ARCHIVE_URL %>](<%= DOCUMENTATION_ARCHIVE_URL %>).

## Development

<%_ if (skipClient) { _%>
To start your application in the Debug configuration, simply run:

    dotnet run --verbosity normal --project ./src/<%= pascalizedBaseName %>/<%= pascalizedBaseName %>.csproj

<%_ } _%>
<%_ if (!skipClient) { _%>
Before you can build this project, you must install and configure the following dependencies on your machine:

1. [Node.js][]: We use Node to run a development web server and build the project.
   Depending on your system, you can install Node either from source or as a pre-packaged bundle.

After installing Node, you should be able to run the following command to install development tools.
You will only need to run this command when dependencies change in [package.json](package.json).

In ./src/<%= pascalizedBaseName %>/ClientApp run 

    npm install

We use npm scripts and [Webpack][] as our build system.

Run the following commands in two separate terminals to create a blissful development experience where your browser
auto-refreshes when files change on your hard drive.

    dotnet run --verbosity normal --project ./src/<%= pascalizedBaseName %>/<%= pascalizedBaseName %>.csproj
    npm --prefix ./src/<%= pascalizedBaseName %>/ClientApp start

npm is also used to manage CSS and JavaScript dependencies used in this application. You can upgrade dependencies by
specifying a newer version in [package.json](package.json). You can also run `npm update` and `npm install` to manage dependencies.
Add the `help` flag on any command to see how you can use it. For example, `npm help update`.

The `npm --prefix ./src/<%= pascalizedBaseName %>/ClientApp run` command will list all of the scripts available to run for this project.

### Service workers

Service workers are commented by default, to enable them please uncomment the following code.

* The service worker registering script in index.html

```html
<script>
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker
        .register('./service-worker.js')
        .then(function() { console.log('Service Worker Registered'); });
    }
</script>
```

Note: workbox creates the respective service worker and dynamically generate the `service-worker.js`

### Managing dependencies

For example, to add [Leaflet][] library as a runtime dependency of your application, you would run following command:

    npm --prefix ./src/<%= pascalizedBaseName %>/ClientApp install --save --save-exact leaflet

To benefit from TypeScript type definitions from [DefinitelyTyped][] repository in development, you would run following command:

    npm --prefix ./src/<%= pascalizedBaseName %>/ClientApp install --save-dev --save-exact @types/leaflet

Then you would import the JS and CSS files specified in library's installation instructions so that [Webpack][] knows about them:
<%_ if (clientFramework === 'angularX') { _%>
Edit [<%= mainClientDir %>/app/vendor.ts](<%= mainClientDir %>/app/vendor.ts) file:
~~~
import 'leaflet/dist/leaflet.js';
~~~

Edit [<%= mainClientDir %>/content/css/vendor.css](<%= mainClientDir %>/content/css/vendor.css) file:
~~~
@import '~leaflet/dist/leaflet.css';
~~~
<%_ } _%>
Note: there are still few other things remaining to do for Leaflet that we won't detail here.
<%_ } _%>

For further instructions on how to develop with JHipster, have a look at [Using JHipster in development][].

<%_ if (clientFramework === 'angularX' && applicationType !== 'microservice') { _%>
### Using angular-cli

You can also use [Angular CLI][] to generate some custom client code.

For example, the following command:

    ng generate component my-component

will generate few files:

    create <%= mainClientDir %>/src/app/my-component/my-component.component.html
    create <%= mainClientDir %>/src/app/my-component/my-component.component.ts
    update <%= mainClientDir %>/src/app/app.module.ts
<%_ } _%>

## Building for production

To build the arifacts and optimize the <%= baseName %> application for production, run:

    cd ./src/<%= pascalizedBaseName %>
    rm -rf ./src/<%= pascalizedBaseName %>/wwwroot
    dotnet publish --verbosity normal -c Release -o ./app/out ./<%= pascalizedBaseName %>.csproj

The `./src/<%= pascalizedBaseName %>/app/out` directory will contain your application dll and its depedencies.

<%_ if (!skipClient) { _%>
This will concatenate and minify the client CSS and JavaScript files. It will also modify `index.html` so it references these new files.
<%_ } _%>

## Testing

To launch your application's tests, run:

    dotnet test --list-tests --verbosity normal
<% if (!skipClient) { %>
### Client tests

In ClientApp folder run : 

    npm test

<%_ } _%>

### Code quality

By Script : 

1. Run Sonar in container : ```docker-compose -f ./docker/sonar.yml up -d```
   
2. Wait container was up Run ```SonarAnalysis.ps1``` and go to http://localhost:9001

Manually : 

1. Run Sonar in container : ```docker-compose -f ./docker/sonar.yml up -d```

2. Install sonar scanner for .net :
   
 ```dotnet tool install --global dotnet-sonarscanner```

3. Run ```dotnet sonarscanner begin /d:sonar.login=admin /d:sonar.password=admin /k:"<%= pascalizedBaseName %>" /d:sonar.host.url="http://localhost:9001" /s:"`pwd`/SonarQube.Analysis.xml"```

4. Build your application : ```dotnet build```

5. Publish sonar results : ```dotnet sonarscanner end /d:sonar.login=admin /d:sonar.password=admin```

6. Go to http://localhost:9001

### Monitoring

1. Run container (uncomment chronograf and kapacitor if you would use it): ```docker-compose -f ./docker/monitoring.yml up -d```

2. Go to http://localhost:3000 (or http://localhost:8888 if you use chronograf)
   
3. (Only for chronograf) Change influxdb connection string by ```YourApp-influxdb```

4. (Only for chronograf) Change kapacitor connection string by ```YourApp-kapacitor```
   
5. (Only for chronograf) You can now add dashboard (like docker), see your app log in Cronograf Log viewer and send alert with kapacitor 

## Build a Docker image

You can also fully dockerize your application and all the services that it depends on. To achieve this, first build a docker image of your app by running:

    docker build -f ./src/<%= pascalizedBaseName %>/Dockerfile -t <%= baseName %> .

Then run:

    docker run -p 80:80 <%= baseName %>

<% if (testFrameworks.includes("gatling")) { %>[Gatling]: http://gatling.io/<% } %>
<%_ if (!skipClient) {_%>
[Node.js]: https://nodejs.org/
[Yarn]: https://yarnpkg.org/
[Webpack]: https://webpack.github.io/
[Angular CLI]: https://cli.angular.io/
[BrowserSync]: http://www.browsersync.io/
[Jest]: https://facebook.github.io/jest/
[Jasmine]: http://jasmine.github.io/2.0/introduction.html
[Protractor]: https://angular.github.io/protractor/
[Leaflet]: http://leafletjs.com/
[DefinitelyTyped]: http://definitelytyped.org/
<%_ } _%>

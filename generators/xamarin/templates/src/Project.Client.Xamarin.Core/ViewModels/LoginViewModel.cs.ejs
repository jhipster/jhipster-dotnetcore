<%#
 Copyright 2013-2023 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>

using System.Threading.Tasks;
using <%= namespace %>.Client.Xamarin.Core.Models;
using <%= namespace %>.Client.Xamarin.Core.Services;
using MvvmCross.Commands;
using MvvmCross.Navigation;
using MvvmCross.ViewModels;

namespace <%= namespace %>.Client.Xamarin.Core.ViewModels;

public class LoginViewModel : BaseViewModel
{
    private readonly IAuthenticationService _authenticationService;
    private readonly IMvxNavigationService _navigationService;

    private bool _active;
    private bool _rememberMe;
    private string _password;
    private string _username;
    private bool _success = true;

    public IMvxCommand SignIn => new MvxAsyncCommand(SignInClicked);
    public IMvxCommand SignUp => new MvxAsyncCommand(SignUpClicked);
    public IMvxCommand ChangeStateCommand => new MvxCommand(InvertCheckBox);

    public bool Active
    {
        get => _active;
        set
        {
            _active = value;
            RaisePropertyChanged(() => Active);
        }
    }

    public string Username
    {
        get => _username;
        set
        {
            _username = value;
            RaisePropertyChanged(() => Username);
            ReloadActive();
        }
    }

    public string Password
    {
        get => _password;
        set
        {
            _password = value;
            RaisePropertyChanged(() => Password);
            ReloadActive();
        }
    }

    public bool RememberMe
    {
        get => _rememberMe;
        set
        {
            _rememberMe = value;
            RaisePropertyChanged(() => RememberMe);
        }
    }

    public bool Success
    {
        get => _success;
        set
        {
            _success = value;
            RaisePropertyChanged(() => Success);
        }
    }

    public LoginViewModel(IMvxNavigationService navigationService, IAuthenticationService authenticationService)
    {
        _navigationService = navigationService;
        _authenticationService = authenticationService;
    }

    private void InvertCheckBox()
    {
        RememberMe = !RememberMe;
    }

    private async Task SignUpClicked()
    {
        await _navigationService.Navigate<RegisterViewModel>();
    }

    private async Task SignInClicked()
    {
        Active = false;
        Success = await SignInConnection();
        if (Success) await _navigationService.Navigate<HomeViewModel>();
    }

    public void ReloadActive()
    {
        Active = !string.IsNullOrEmpty(Password) && !string.IsNullOrEmpty(Username) && Password.Length > 3;
    }

    public Task<bool> SignInConnection()
    {
        var model = new LoginModel
        {
            Username = Username,
            Password = Password,
            RememberMe = RememberMe
        };
        return _authenticationService.SignIn(model);
    }
}

<%#
 Copyright 2013-2023 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>

using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using <%= namespace %>.Client.Xamarin.Core.Models;
using <%= namespace %>.Client.Xamarin.Core.Services;
using MvvmCross.Commands;
using MvvmCross.Navigation;
using MvvmCross.ViewModels;
using <%= namespace %>.Client.Xamarin.Shared.Constants;
using Xamarin.Essentials;

namespace <%= namespace %>.Client.Xamarin.Core.ViewModels;

public class RegisterViewModel : BaseViewModel
{
    private readonly IAuthenticationService _authenticationService;
    private readonly IMvxNavigationService _navigationService;
    private readonly IRegisterService _registerService;

    private bool _active;
    private bool _rememberMe;
    private bool _errorMail;
    private bool _errorLogin;
    private bool _success;
    private string _password;
    private string _username;
    private string _email;
    private string _confirmPassword;
    private bool _error = false;

    public IMvxCommand SignUp => new MvxAsyncCommand(HandleSignUp);
    public IMvxCommand ChangeStateCommand => new MvxCommand(InvertCheckBox);
    public IMvxCommand GoBack => new MvxCommand(GoBackClicked);

    public bool Active
    {
        get => _active;
        set
        {
            _active = value;
            RaisePropertyChanged(() => Active);
        }
    }

    public string Username
    {
        get => _username;
        set
        {
            _username = value;
            RaisePropertyChanged(() => Username);
            ReloadActive();
        }
    }

    public string Password
    {
        get => _password;
        set
        {
            _password = value;
            RaisePropertyChanged(() => Password);
            ReloadActive();
        }
    }

    public string Email
    {
        get => _email;
        set
        {
            _email = value;
            RaisePropertyChanged(() => Password);
            ReloadActive();
        }
    }

    public bool RememberMe
    {
        get => _rememberMe;
        set
        {
            _rememberMe = value;
            RaisePropertyChanged(() => RememberMe);
        }
    }

    public bool Error
    {
        get => _error;
        set
        {
            _error = value;
            RaisePropertyChanged(() => Error);
        }
    }

    public string ConfirmPassword
    {
        get => _confirmPassword;
        set
        {
            _confirmPassword = value;
            RaisePropertyChanged(() => ConfirmPassword);
            ReloadActive();
        }
    }

    public bool ErrorMail
    {
        get => _errorMail;
        set
        {
            _errorMail = value;
            RaisePropertyChanged(() => ErrorMail);
        }
    }

    public bool ErrorLogin
    {
        get => _errorLogin;
        set
        {
            _errorLogin = value;
            RaisePropertyChanged(() => ErrorLogin);
        }
    }

    public bool Success
    {
        get => _success;
        set
        {
            _success = value;
            RaisePropertyChanged(() => Success);
        }
    }

    public RegisterViewModel(IMvxNavigationService navigationService, IAuthenticationService authenticationService, IRegisterService registerService)
    {
        _navigationService = navigationService;
        _authenticationService = authenticationService;
        _registerService = registerService;
    }

    private void GoBackClicked()
    {
        _navigationService.Navigate<LoginViewModel>();
    }

    private void InvertCheckBox()
    {
        RememberMe = !RememberMe;
    }

    private async Task HandleSignUp()
    {
        Active = false;
        var resultError = await _registerService.Save(new UserSaveModel
        {
            Password = Password,
            Login = Username,
            Email = Email,
            LangKey = "en"
        });

        Error = resultError == ErrorConst.UnknownErrorType;
        ErrorLogin = resultError == ErrorConst.LoginAlreadyUsedType;
        ErrorMail = resultError == ErrorConst.EmailAlreadyUsedType;

        Success = (!new List<bool>() { Error, ErrorLogin, ErrorMail }.Contains(true));
    }

    private void ReloadActive()
    {
        Active = CheckActive();
    }

    private bool CheckActive()
    {
        var fields = new List<string> { Password, ConfirmPassword, Username, Email };
        if (fields.Any(field => string.IsNullOrEmpty(field))) return false;
        if (Password.Length < 4) return false;
        if (ConfirmPassword != Password) return false;
        if (Email.Length < 5) return false;
        if (Email.Split('@').Length != 2) return false;
        if (!Email.Split('@').All(val => val.Length > 0)) return false;
        return true;
    }
}

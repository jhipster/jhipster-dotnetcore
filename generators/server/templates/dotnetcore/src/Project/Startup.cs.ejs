<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using System;
using <%= namespace %>.Infrastructure.Data;
using <%= namespace %>.Configuration;
using <%= namespace %>.Infrastructure.Configuration;
<%_ if (serviceDiscoveryType === 'consul' && applicationType !== 'gateway') { _%>
using <%= namespace %>.Configuration.Consul;
<%_ } _%>
<%_ if ( applicationType === 'gateway') { _%>
using Ocelot.DependencyInjection;
using Ocelot.Middleware;
using Ocelot.Provider.Consul;
<%_ } _%>
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using Newtonsoft.Json;

[assembly: ApiController]

namespace <%= namespace %> {
    public class Startup {
        public Startup(IConfiguration configuration, IHostEnvironment environment)
        {
            Configuration = configuration;
            Environment = environment;
        }

        private IConfiguration Configuration { get; }

        public IHostEnvironment Environment { get; }

        public virtual void ConfigureServices(IServiceCollection services)
        {
            services
                .AddNhipsterModule(Configuration);

            AddDatabase(services);

            <%_ if (authenticationType === 'oauth2') { _%>
            // Build an intermediate service provider
            var sp = services.BuildServiceProvider();
            var jhipsterSettings = sp.GetService<IOptions<JHipsterSettings>>().Value;
            <%_ } _%>

            services
            <%_ if (authenticationType === 'jwt') { _%>
                .AddSecurityModule()
            <%_ } else { 
                if (applicationType !== 'microservice') { _%>
                .AddSecurityModule(jhipsterSettings)
                <%_ }
            } _%>
                .AddProblemDetailsModule(Environment)
                .AddAutoMapperModule()
                .AddSwaggerModule()
                .AddWebModule()
            <%_ if (serviceDiscoveryType === 'consul'  && applicationType !== 'gateway') { _%>
                .AddConsul(Configuration)
            <%_ } _%>
                .AddRepositoryModule()            
                .AddServiceModule();

            <%_ if (applicationType === 'gateway') { _%>
            services
                .AddOcelot()
                .AddConsul();
            <%_ } _%>
                
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public virtual void Configure(IApplicationBuilder app, IHostEnvironment env, IServiceProvider serviceProvider,
            ApplicationDatabaseContext context, IOptions<JHipsterSettings> jhipsterSettingsOptions)
        {
            var jhipsterSettings = jhipsterSettingsOptions.Value;
            app
                .UseApplicationSecurity(jhipsterSettings)
                .UseApplicationProblemDetails()
                .UseApplicationSwagger()
                .UseApplicationWeb(env)
                <%_ if (serviceDiscoveryType === 'consul' && applicationType !== 'gateway') { _%>
                .UseConsul(Configuration)
                <%_ } _%>
                .UseApplicationDatabase(serviceProvider, env)<%_ if (authenticationType === 'oauth2' || applicationType === 'microservice') { _%>;<%_ } _%>
                
                <%_ if (authenticationType === 'jwt' && applicationType !== 'microservice') { _%>
                .UseApplicationIdentity(serviceProvider);
                <%_ } _%>
        }

        protected virtual void AddDatabase(IServiceCollection services)
        {
            services.AddDatabaseModule(Configuration);
        }
    }
}

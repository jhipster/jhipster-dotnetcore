<%#
 Copyright 2019-2022 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using System;
using <%= namespace %>.Infrastructure.Data;
using <%= namespace %>.Configuration;
using <%= namespace %>.Infrastructure.Configuration;
<%_ if (serviceDiscoveryType === 'consul' && applicationType !== 'gateway') { _%>
using <%= namespace %>.Configuration.Consul;
<%_ } _%>
<%_ if ( applicationType === 'gateway') { _%>
using Ocelot.DependencyInjection;
using Ocelot.Middleware;
using Ocelot.Provider.Consul;
<%_ } _%>
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using Newtonsoft.Json;
<%_ if (cqrsEnabled) { _%>
using MediatR;
using <%= namespace %>.Application;
<%_ } _%>

[assembly: ApiController]

namespace <%= namespace %>;

public class Startup : IStartup
{
    public virtual void Configure(IConfiguration configuration, IServiceCollection services)
    {
        services
            .AddAppSettingsModule(configuration)<%_ if (serviceDiscoveryType === 'consul' && applicationType !== 'gateway') { _%>

            .AddConsul(configuration)<%_ } _%>;

        <%_ if (clientFramework === "Blazor") { _%>
        configuration.ConfigureWebModule();
        <%_ } _%>

        AddDatabase(configuration, services);
    }

    public virtual void ConfigureServices(IServiceCollection services, IHostEnvironment environment)
    {
        <%_ if (cqrsEnabled) { _%>
        services.AddMediatR(typeof(ApplicationClassesAssemblyHelper));

        <%_ } _%>
        services
        <%_ if (authenticationType === 'jwt' || applicationType !== 'microservice') { _%>
            .AddSecurityModule()
        <%_ } _%>
            .AddProblemDetailsModule(environment)
            .AddAutoMapperModule()
            .AddSwaggerModule()
            .AddWebModule()
            .AddRepositoryModule()
            .AddServiceModule();
        <%_ if (applicationType === 'gateway') { _%>

        services
            .AddOcelot()
            .AddConsul();
        <%_ } _%>
    }

    public virtual void ConfigureMiddleware(IApplicationBuilder app, IHostEnvironment environment)
    {
        IServiceProvider serviceProvider = app.ApplicationServices;
        var securitySettingsOptions = serviceProvider.GetRequiredService<IOptions<SecuritySettings>>();
        var securitySettings = securitySettingsOptions.Value;
        app
            .UseApplicationSecurity(securitySettings)
            .UseApplicationProblemDetails()
            <%_ if (serviceDiscoveryType === 'consul' && applicationType !== 'gateway') { _%>
            .UseConsul()
            <%_ } _%>
            .UseApplicationDatabase(environment)<%_ if (authenticationType === 'oauth2' || applicationType === 'microservice') { _%>;<%_ } _%>

            <%_ if (authenticationType === 'jwt' && applicationType !== 'microservice') { _%>
            .UseApplicationIdentity();
            <%_ } _%>
    }

    public virtual void ConfigureEndpoints(IApplicationBuilder app, IHostEnvironment environment)
    {
        app
            .UseApplicationSwagger()
            .UseApplicationWeb(environment);
    }

    protected virtual void AddDatabase(IConfiguration configuration, IServiceCollection services)
    {
        services.AddDatabaseModule(configuration);
    }
}

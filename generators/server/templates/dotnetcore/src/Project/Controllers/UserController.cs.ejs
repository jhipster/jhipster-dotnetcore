<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using JHipsterNet.Pagination;
using JHipsterNet.Pagination.Extensions;
using <%= namespace %>.Models;
using <%= namespace %>.Security;
using <%= namespace %>.Service;
using <%= namespace %>.Service.Dto;
using <%= namespace %>.Web.Extensions;
using <%= namespace %>.Web.Filters;
using <%= namespace %>.Web.Rest.Problems;
using <%= namespace %>.Web.Rest.Utilities;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using <%= namespace %>.Controllers.RepositoryLayer;


namespace <%= namespace %>.Controllers {
    [Authorize]
    [Route("api")]
    [ApiController]
    public class UserController : ControllerBase {
        private readonly ILogger<UserController> _log;
        private readonly IUserRepository _userRepository;

        public UserController(ILogger<UserController> log, IUnitOfWork context, IMailService mailService)
        {
            _log = log;
            _userRepository = new UserRepository(context, mailService);
        }

        [HttpPost("users")]
        [ValidateModel]
        public async Task<ActionResult<User>> CreateUser([FromBody] UserDto userDto)
        {
            _log.LogDebug($"REST request to save User : {userDto}");
            if (userDto.Id != null)
                throw new BadRequestAlertException("A new user cannot already have an ID", "userManagement",
                    "idexists");

            var newUser = await _userRepository.CreateUserAndSendMail(userDto);
            
            return CreatedAtAction(nameof(GetUser), new {login = newUser.Login}, newUser)
                .WithHeaders(HeaderUtil.CreateEntityCreationAlert("userManagement.created", newUser.Login));
        }

        [HttpPut("users")]
        [ValidateModel]
        public async Task<IActionResult> UpdateUser([FromBody] UserDto userDto)
        {
            _log.LogDebug($"REST request to update User : {userDto}");

            var updatedUser = await _userRepository.UpdateUser(userDto);

            return ActionResultUtil.WrapOrNotFound(updatedUser)
                .WithHeaders(HeaderUtil.CreateAlert("userManagement.updated", userDto.Login));
        }

        [HttpGet("users")]
        public ActionResult<IEnumerable<User>> GetAllUsers(IPageable pageable)
        {
            _log.LogDebug("REST request to get a page of Users");

            var page = _userRepository.GetAllUserFromPage(pageable);

            var userDtos = page.Content.Select(user => new UserDto(user));
            var headers = page.GeneratePaginationHttpHeaders();
            return Ok(userDtos).WithHeaders(headers);
        }

        [HttpGet("users/authorities")]
        [Authorize(Roles = RolesConstants.ADMIN)]
        public ActionResult<IEnumerable<string>> GetAuthorities()
        {
            return Ok(_userRepository.GetAuthorities());
        }

        [HttpGet("users/{login}")]
        public async Task<IActionResult> GetUser([FromRoute] string login)
        {
            _log.LogDebug($"REST request to get User : {login}");

            var result = await _userRepository.GetUser(login);

            var userDto = result != null ? new UserDto(result) : null;
            return ActionResultUtil.WrapOrNotFound(userDto);
        }

        [HttpDelete("users/{login}")]
        [Authorize(Roles = RolesConstants.ADMIN)]
        public async Task<IActionResult> DeleteUser([FromRoute] string login)
        {
            _log.LogDebug($"REST request to delete User : {login}");
            await _userRepository.DeleteUser(login);
            return Ok().WithHeaders(HeaderUtil.CreateEntityDeletionAlert("userManagement.deleted", login));
        }
    }
}

<%#
 Copyright 2019-2022 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_ if (cqrsEnabled) { _%>
using MediatR;
<%_ } _%>
using AutoMapper;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using JHipsterNet.Core.Pagination;
using JHipsterNet.Core.Pagination.Extensions;
using <%= namespace %>.Domain.Entities;
using <%= namespace %>.Security;
using <%= namespace %>.Domain.Services.Interfaces;
using <%= namespace %>.Dto;
using <%= namespace %>.Web.Extensions;
using <%= namespace %>.Web.Filters;
using <%= namespace %>.Web.Rest.Problems;
using <%= namespace %>.Web.Rest.Utilities;
using <%= namespace %>.Crosscutting.Constants;
using <%= namespace %>.Crosscutting.Exceptions;
using <%= namespace %>.Infrastructure.Web.Rest.Utilities;
<%_ if (cqrsEnabled) { _%>
using <%= namespace %>.Application.Queries;
using <%= namespace %>.Application.Commands;
<%_ } _%>
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

namespace <%= namespace %>.Controllers;


[Route("api/users")]
[ApiController]
public class PublicUsersController : ControllerBase
{
    private readonly ILogger<UsersController> _log;
    <%_ if (cqrsEnabled) { _%>
    private readonly IMediator _mediator;
    <%_ } else { _%>
    private readonly IMapper _mapper;
    private readonly IUserService _userService;
    <%_ } _%>

    <%_ if (cqrsEnabled) { _%>
    public PublicUsersController(ILogger<UsersController> log, IMediator mediator)
    {
        _log = log;
        _mediator = mediator;
    }
    <%_ } else { _%>
    public PublicUsersController(ILogger<UsersController> log, IUserService userService, IMapper mapper)
    {
        _log = log;
        _userService = userService;
        _mapper = mapper;
    }
    <%_ } _%>


    [HttpGet]
    public async Task<ActionResult<IEnumerable<UserDto>>> GetAllPublicUsers(IPageable pageable)
    {
        _log.LogDebug("REST request to get a page of Users");
        <%_ if (cqrsEnabled) { _%>
        (var headers, var userDtos) = await _mediator.Send(new UserGetAllPublicUsersQuery { Page = pageable });
        <%_ } else { _%>
        var page = await _userService.GetAllPublicUsers(pageable);
        var userDtos = page.Content.Select(user => _mapper.Map<UserDto>(user));
        var headers = page.GeneratePaginationHttpHeaders();
        <%_ } _%>
        return Ok(userDtos).WithHeaders(headers);
    }

}

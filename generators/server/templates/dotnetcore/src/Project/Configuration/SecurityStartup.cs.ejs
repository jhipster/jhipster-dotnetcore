<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using System;
using <%= namespace %>.Infrastructure.Configuration;
<%_ if (authenticationType === 'jwt') { _%>
using System.IdentityModel.Tokens.Jwt;
using System.Text;
using <%= namespace %>.Infrastructure.Data;
using <%= namespace %>.Domain;
using <%= namespace %>.Security;
using <%= namespace %>.Security.Jwt;
using <%= namespace %>.Domain.Services;
using <%= namespace %>.Domain.Services.Interfaces;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Cors.Infrastructure;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
<%_ if (applicationType !== 'microservice') { _%>
using AuthenticationService = <%= namespace %>.Domain.Services.AuthenticationService;
using IAuthenticationService = <%= namespace %>.Domain.Services.Interfaces.IAuthenticationService;
<%_ } _%>
<%_ } else { _%>
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication.OpenIdConnect;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Cors.Infrastructure;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Protocols.OpenIdConnect;
<%_ } _%>

namespace <%= namespace %>.Configuration {
    public static class SecurityStartup {

        <%_ if (authenticationType === 'jwt') { _%>
        public const string UserNameClaimType = JwtRegisteredClaimNames.Sub;
        <%_ } _%>

        <%_ if (authenticationType === 'jwt') { _%>
        public static IServiceCollection AddSecurityModule(this IServiceCollection services)
        <%_ } else { _%>
        public static IServiceCollection AddSecurityModule(this IServiceCollection services, JHipsterSettings jhipsterSettings)
        <%_ } _%>
        {
            <%_ if (authenticationType === 'jwt') { _%>
            //TODO Retrieve the signing key properly (DRY with TokenProvider)
            var opt = services.BuildServiceProvider().GetRequiredService<IOptions<JHipsterSettings>>();
            var jhipsterSettings = opt.Value;
            byte[] keyBytes;
            var secret = jhipsterSettings.Security.Authentication.Jwt.Secret;

            if (!string.IsNullOrWhiteSpace(secret)) {
                keyBytes = Encoding.ASCII.GetBytes(secret);
            }
            else {
                keyBytes = Convert.FromBase64String(jhipsterSettings.Security.Authentication.Jwt.Base64Secret);
            }

            JwtSecurityTokenHandler.DefaultInboundClaimTypeMap.Clear(); // => remove default claims

            <%_ if (applicationType !== 'microservice') { _%>
            services.AddIdentity<User, Role>(options => {
                    options.SignIn.RequireConfirmedEmail = true;
                    options.ClaimsIdentity.UserNameClaimType = UserNameClaimType;
                })
                .AddEntityFrameworkStores<ApplicationDatabaseContext>()
                .AddUserStore<UserStore<User, Role, ApplicationDatabaseContext, string, IdentityUserClaim<string>,
                    UserRole, IdentityUserLogin<string>, IdentityUserToken<string>, IdentityRoleClaim<string>>>()
                .AddRoleStore<RoleStore<Role, ApplicationDatabaseContext, string, UserRole, IdentityRoleClaim<string>>
                >()
                .AddDefaultTokenProviders();
            <%_ } _%>

            services
                .AddAuthentication(options => {
                    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                    options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
                    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
                })
                .AddJwtBearer(cfg => {
                    cfg.RequireHttpsMetadata = false;
                    cfg.SaveToken = true;
                    cfg.TokenValidationParameters = new TokenValidationParameters {
                        ValidateIssuer = false,
                        ValidateAudience = false,
                        IssuerSigningKey = new SymmetricSecurityKey(keyBytes),
                        ClockSkew = TimeSpan.Zero,/// remove delay of token when expire
                        NameClaimType = UserNameClaimType
                    };
                });

            <%_ if (applicationType !== 'microservice') { _%>
            services.AddScoped<IPasswordHasher<User>, BCryptPasswordHasher>();
            <%_ } _%>            
            services.AddScoped<IClaimsTransformation, RoleClaimsTransformation>();
            services.AddScoped<ITokenProvider, TokenProvider>();
            <%_ } else { _%>
            services.AddAuthentication(options =>
            {
                options.DefaultAuthenticateScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                options.DefaultSignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = OpenIdConnectDefaults.AuthenticationScheme;
            })
            .AddCookie()
            .AddOpenIdConnect(options =>
            {
                options.Authority = jhipsterSettings.Security.Authentication.OAuth2.Provider.IssuerUri;
                options.ClientId = jhipsterSettings.Security.Authentication.OAuth2.Provider.ClientId;
                options.ClientSecret = jhipsterSettings.Security.Authentication.OAuth2.Provider.ClientSecret;
                options.SaveTokens = true;
                options.ResponseType = OpenIdConnectResponseType.Code;
                options.RequireHttpsMetadata = false; // dev only
                options.GetClaimsFromUserInfoEndpoint = true;
                options.Scope.Add("openid");
                options.Scope.Add("profile");
                options.Scope.Add("email");
                options.CallbackPath = new PathString("/login/oauth2/code/oidc");
                options.ClaimActions.MapJsonKey("role", "roles", "role");
                options.ClaimActions.MapJsonKey("role", "groups", "role");
            });

            services.AddAuthorization();
            <%_ } _%>
            return services;
        }

        public static IApplicationBuilder UseApplicationSecurity(this IApplicationBuilder app,
            JHipsterSettings jhipsterSettings)
        {
            app.UseCors(CorsPolicyBuilder(jhipsterSettings.Cors));
            app.UseAuthentication();
            <%_ if (authenticationType === 'oauth2') { _%>
            app.UseAuthorization();
            <%_ } _%>
            // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
            app.UseHsts();
            app.UseHttpsRedirection();
            return app;
        }

        private static Action<CorsPolicyBuilder> CorsPolicyBuilder(Cors config)
        {
            //TODO implement an url based cors policy rather than global or per controller
            return builder => {
                if (!config.AllowedOrigins.Equals("*"))
                {
                    if (config.AllowCredentials)
                    {
                        builder.AllowCredentials();
                    }
                    else
                    {
                        builder.DisallowCredentials();
                    }
                }

                builder.WithOrigins(config.AllowedOrigins)
                    .WithMethods(config.AllowedMethods)
                    .WithHeaders(config.AllowedHeaders)
                    .WithExposedHeaders(config.ExposedHeaders)
                    .SetPreflightMaxAge(TimeSpan.FromSeconds(config.MaxAge));
            };
        }
    }
}

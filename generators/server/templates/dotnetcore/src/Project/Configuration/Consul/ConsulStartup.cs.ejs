<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using System;
using Consul;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Diagnostics.HealthChecks;

namespace <%= namespace %>.Configuration.Consul
{
    public static class ConsulStartup
    {
        public static IServiceCollection AddConsul(this IServiceCollection serviceCollection, IConfiguration configuration)
        {
            var consulConfigOptions = configuration.GetOptions<ConsulOptions>("Consul");

            serviceCollection.Configure<ConsulOptions>(configuration.GetSection("Consul"));
           
            return serviceCollection.AddSingleton<IConsulClient>(c => new ConsulClient(cfg =>
            {
                if (!string.IsNullOrEmpty(consulConfigOptions.Host))
                {
                    cfg.Address = new Uri(consulConfigOptions.Host);
                }
            }));
        }

        public static IApplicationBuilder UseConsul(this IApplicationBuilder app, IConfiguration configuration)
        {
            using (var scope = app.ApplicationServices.CreateScope())
            {
                var config = configuration.GetOptions<ConsulOptions>("Consul");

                if (!config.Enabled)
                    return app;

                var serviceId = Guid.NewGuid();
                var consulServiceId = $"{config.Service}:{serviceId}";

                var client = scope.ServiceProvider.GetService<IConsulClient>();

                var consulServiceRistration = new AgentServiceRegistration
                {
                    Name = config.Service,
                    ID = consulServiceId,
                    Address = config.Address,
                    Port = config.Port,
                };

                if (config.PingEnabled)
                {
                    var healthService = scope.ServiceProvider.GetService<HealthCheckService>();

                    if (healthService != null)
                    {
                        var scheme = config.Address.StartsWith("http", StringComparison.InvariantCultureIgnoreCase)
                            ? string.Empty
                            : "http://";
                        var check = new AgentServiceCheck
                        {
                            Interval = TimeSpan.FromSeconds(5),
                            DeregisterCriticalServiceAfter = TimeSpan.FromSeconds(10),
                            HTTP =
                                $"{scheme}{config.Address}{(config.Port > 0 ? $":{config.Port}" : string.Empty)}/health"
                        };

                        consulServiceRistration.Checks = new[] {check};
                    }
                    else
                    {
                        throw new ConsulConfigurationException("Please ensure that Healthchecks has been added before adding checks to Consul.");
                    }
                }

                client.Agent.ServiceRegister(consulServiceRistration);

                return app;
            }
        }
    }
}

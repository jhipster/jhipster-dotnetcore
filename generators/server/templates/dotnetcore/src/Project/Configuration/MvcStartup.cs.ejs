<%#
 Copyright 2019-2022 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using JHipsterNet.Web.Pagination.Binders;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
<%_ if ( applicationType === 'gateway') { _%>
using Ocelot.Middleware;
<%_ } _%>

namespace <%= namespace %>.Configuration;

public static class WebConfiguration
{
    <%_ if (clientFramework === "Blazor") { _%>
    private static bool s_includeBlazor;

    public static void ConfigureWebModule(this IConfiguration configuration)
    {
        s_includeBlazor = configuration.GetValue<bool>("INCLUDE_BLAZOR");
    }
    <%_ } _%>

    public static IServiceCollection AddWebModule(this IServiceCollection services)
    {
        services.AddHttpContextAccessor();

        services.AddMvc();

        //https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/health-checks?view=aspnetcore-2.2
        services.AddHealthChecks();

        services.AddControllers(options => { options.ModelBinderProviders.Insert(0, new PageableBinderProvider()); })
        .AddNewtonsoftJson(options =>
        {
            options.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
            options.SerializerSettings.NullValueHandling = NullValueHandling.Ignore;
            options.SerializerSettings.ReferenceLoopHandling = ReferenceLoopHandling.Ignore;
            options.SerializerSettings.Formatting = Formatting.Indented;
            options.SerializerSettings.Converters.Add(new Newtonsoft.Json.Converters.StringEnumConverter());
        });

        <%_ if (!skipClient && clientFramework !== "Blazor" && clientFramework !== "Xamarin") { _%>
        services.AddSpaStaticFiles(configuration =>
        {
            configuration.RootPath = "ClientApp/dist";
        });
        <%_ } _%>

        return services;
    }

    public static IApplicationBuilder UseApplicationWeb(this IApplicationBuilder app, IHostEnvironment env)
    {
        app.UseDefaultFiles();
        <%_ if (clientFramework === "Blazor") { _%>
        if (s_includeBlazor)
        {
            // Only serve blazor files if config INCLUDE_BLAZOR is true in appsettings.json or in environment variable.
            app.UseBlazorFrameworkFiles();
        }
        <%_ } _%>
        app.UseStaticFiles();

        app.UseRouting();
        app.UseAuthorization();
        app.UseEndpoints(endpoints =>
        {
            endpoints.MapControllers();
            <%_ if (clientFramework === "Blazor") { _%>
            if (s_includeBlazor)
            {
                // Only add fallback for blazor's index.html if config INCLUDE_BLAZOR is true in appsettings.json or in environment variable.
                endpoints.MapFallbackToFile("index.html");
            }
            <%_ } _%>
        });

        <%_ if (applicationType === 'gateway') { _%>
        app.Map("/services", MapApiGateway);
        <%_ } _%>

        app.UseHealthChecks("/health");

        <%_ if (!skipClient && clientFramework !== "Blazor" && clientFramework !== "Xamarin") { _%>
        app.UseSpa(spa =>
        {
            spa.Options.SourcePath = "ClientApp";
        });
        if (!env.IsDevelopment())
        {
            app.UseSpaStaticFiles();
        }
        <%_ } _%>

        return app;
    }

    <%_ if (applicationType === 'gateway') { _%>
    private static void MapApiGateway(IApplicationBuilder app)
    {
        app.UseOcelot().Wait();
    }
    <%_ } _%>
}

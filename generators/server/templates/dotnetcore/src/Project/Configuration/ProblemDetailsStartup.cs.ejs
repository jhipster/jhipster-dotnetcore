<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using Hellang.Middleware.ProblemDetails;
using <%= namespace %>.Web.Rest.Problems;
using <%= namespace %>.Crosscutting.Exceptions;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Hosting;

namespace <%= namespace %>.Configuration {
    public static class ProblemDetailsStartup {
        //TODO Understand difference between UI and non-ui Exceptions
        //https://github.com/christianacca/ProblemDetailsDemo/blob/master/src/ProblemDetailsDemo.Api/Startup.cs

        public static IServiceCollection AddProblemDetailsModule(this IServiceCollection @this, IHostEnvironment environment)
        {
            @this.AddProblemDetails(setup =>
            {
                setup.IncludeExceptionDetails = (_context, _exception) => !environment.IsDevelopment();

                // Map BadRequestAlertException and inheriting exceptions to ProblemDetails
                setup.Map<BadRequestAlertException>(exception => new ProblemDetails
                {
                    Type = exception.Type,
                    Detail = exception.Detail,
                    Status = StatusCodes.Status400BadRequest,
                    Extensions = { ["params"] = exception.EntityName, ["message"] = $"error.{exception.ErrorKey}" }
                });

                // Map InternalServerErrorException with status 500
                setup.Map<InternalServerErrorException>(exception => new ProblemDetails
                {
                    Type = exception.Type,
                    Detail = exception.Detail,
                    Status =  StatusCodes.Status500InternalServerError
                });

                // This mapping will catch exceptions inheriting from BaseException that has not been mapped previously
                setup.Map<BaseException>(exception => new ProblemDetails
                {
                    Type = exception.Type,
                    Detail = exception.Detail,
                    Status =  StatusCodes.Status400BadRequest
                });

            });

            @this.ConfigureOptions<ProblemDetailsConfiguration>();

            return @this;
        }

        public static IApplicationBuilder UseApplicationProblemDetails(this IApplicationBuilder @this)
        {
            @this.UseProblemDetails();
            return @this;
        }
    }
}

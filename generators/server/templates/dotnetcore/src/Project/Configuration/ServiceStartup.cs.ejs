<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using Scrutor;
using Microsoft.Extensions.DependencyInjection;
using <%= namespace %>.Domain.Services;
using <%= namespace %>.Domain.Services.Interfaces;

namespace <%= namespace %>.Configuration {
    public static class ServiceStartup
    {
        public static IServiceCollection AddServiceModule(this IServiceCollection services)
        {
            services.Scan(scan => scan
                .FromAssembliesOf(typeof(ServicesInterfacesAssemblyHelper), typeof(ServicesClassesAssemblyHelper))
                    // Find services and register its matching interfaces/implementations. 
                    // For example: JobService matches IJobService, EmployeeService matches IEmployeeService, etc...
                    .AddClasses(classes => classes.InNamespaces(ServicesClassesAssemblyHelper.Namespace))
                        .UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ServiceType))
                        .AsMatchingInterface()
                        .WithScopedLifetime()
                    
                    // Now find services with class name ending with 'ExtendedService' and register it to interfaces 
                    // it implements. 
                    // For example: if JobExtendedService class is present and implements IJobService, then register 
                    // it as the implementation for IJobService, replacing the generated service class (JobService).
                    .AddClasses(classes => classes.Where(type => type.Namespace.Equals(ServicesClassesAssemblyHelper.Namespace) &&
                                                                type.Name.EndsWith("ExtendedService")))
                        .UsingRegistrationStrategy(RegistrationStrategy.Replace(ReplacementBehavior.ServiceType))
                        .AsImplementedInterfaces()
                        .WithScopedLifetime()                    
            );
            return services;
        }
    }
}

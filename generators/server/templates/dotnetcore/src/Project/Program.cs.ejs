<%#
 Copyright 2019-2022 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Serilog;
using System;
using System.IO;
using System.Security.Authentication;
using <%= namespace %>;
using <%= namespace %>.Configuration;
using IStartup = <%= namespace %>.IStartup;
using static JHipsterNet.Core.Boot.BannerPrinter;
using Microsoft.Extensions.Hosting;
<%_ if (serviceDiscoveryType === 'consul') { _%>
using Winton.Extensions.Configuration.Consul;

const string ConsulSection = "Consul";
const string ConsulHost = "Host";
<%_ } _%>

PrintBanner(10 * 1000);

try
{
    var webAppOptions = new WebApplicationOptions
    {
        ContentRootPath = Directory.GetCurrentDirectory(),
        EnvironmentName = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT"),
        <%_ if(!skipClient && clientFramework !== "Blazor" && clientFramework !== "Xamarin") { _%>
        WebRootPath = Path.Combine(Directory.GetCurrentDirectory(), "ClientApp", "dist"),
        <%_ } _%>
        Args = args
    };
    var builder = WebApplication.CreateBuilder(webAppOptions);

    <%_ if (applicationType === 'gateway') { _%>
    builder.Configuration.AddJsonFile("ocelot.json");

    <%_ } _%>
    <%_ if (serviceDiscoveryType === 'consul') { _%>
    builder.Configuration.AddConsul(
        "config/application/data",
        options =>
        {
            options.ConsulConfigurationOptions =
                cco => { cco.Address = new Uri(builder.Configuration.GetSection(ConsulSection)[ConsulHost]); };
            //options.Optional = true;
            //options.PollWaitTime = TimeSpan.FromSeconds(5);
            //options.ReloadOnChange = true;
        });

    <%_ } _%>
    builder.Logging.AddSerilog(builder.Configuration);

    IStartup startup = new Startup();

    startup.Configure(builder.Configuration, builder.Services);
    startup.ConfigureServices(builder.Services, builder.Environment);

    WebApplication app = builder.Build();

    startup.ConfigureMiddleware(app, app.Environment);
    startup.ConfigureEndpoints(app, app.Environment);

    app
        .MapGet("/",
            () =>
            "Communication with gRPC endpoints must be made through a gRPC client. To learn how to create a client, visit: https://go.microsoft.com/fwlink/?linkid=2086909");

    app.Run();

    return 0;
}
catch (Exception ex)
{
    // Use ForContext to give a context to this static environment (for Serilog LoggerNameEnricher).
    Log.ForContext<Program>().Fatal(ex, "Host terminated unexpectedly");
    return 1;
}
finally
{
    Log.CloseAndFlush();
}

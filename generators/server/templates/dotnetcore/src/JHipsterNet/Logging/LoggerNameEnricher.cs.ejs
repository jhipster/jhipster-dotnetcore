<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using System.Linq;
using Serilog.Core;
using Serilog.Events;

namespace JHipsterNet.Logging {
    public class LoggerNameEnricher: ILogEventEnricher {

        public void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory)
        {
            var sourceContext = logEvent.Properties["SourceContext"].ToString().Trim('"');
            logEvent.AddPropertyIfAbsent(propertyFactory.CreateProperty("LoggerName", GetAbbreviatedClassName(sourceContext, 39)));
        }

//        GetAbbreviatedClassName(null).Should().Be("");
//        GetAbbreviatedClassName("Microsoft.AspNetCore.Hosting.WebHost").Should().Be("WebHost");
//        GetAbbreviatedClassName("Microsoft.AspNetCore.Hosting.WebHost", 1).Should().Be("M.A.H.WebHost");
//        GetAbbreviatedClassName("Microsoft.AspNetCore.Hosting.WebHost", 17).Should().Be("M.A.H.WebHost");
//        GetAbbreviatedClassName("Microsoft.AspNetCore.Hosting.WebHost", 18).Should().Be("M.A.Hosting.WebHost");
//        GetAbbreviatedClassName("Microsoft.AspNetCore.Hosting.WebHost", 40).Should().Be("Microsoft.AspNetCore.Hosting.WebHost");

        private static string GetAbbreviatedClassName(string fullQualifiedClassName, int length = 0)
        {
            if (string.IsNullOrEmpty(fullQualifiedClassName)) {
                return "";
            }

            var parts = fullQualifiedClassName.Split('.');
            var className = parts.Last();

            if (length == 0) {
                return className;
            }

            var output = new string[parts.Length];
            output[parts.Length - 1] = className;

            // -1 for the '.' character
            var availableSpace = length - className.Length - 1;

            for (var i = parts.Length - 2; i >= 0; i--) {
                var nameSpace = parts[i];
                availableSpace = availableSpace - nameSpace.Length - 1;
                if (availableSpace > 0) {
                    output[i] = nameSpace;
                }
                else {
                    output[i] = nameSpace.Substring(0, 1);
                }
            }
            return string.Join(".", output);
        }
    }
}

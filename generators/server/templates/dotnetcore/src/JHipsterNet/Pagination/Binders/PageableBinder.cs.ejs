<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using JHipsterNet.Pagination.Extensions;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc.ModelBinding;

namespace JHipsterNet.Pagination.Binders {
    public class PageableBinder : IModelBinder {
        private readonly PageableBinderConfig _binderConfig = new PageableBinderConfig();

        public Task BindModelAsync(ModelBindingContext bindingContext)
        {
            //TODO Assert target method (only one pageable)
            //TODO defensive programing against PageableBinderConfig values

            if (bindingContext == null) throw new ArgumentNullException(nameof(bindingContext));

            var queryString = bindingContext.HttpContext.Request.QueryString;
            var pageable = ResolvePageableArgumentFromQueryString(queryString);
            bindingContext.Result = ModelBindingResult.Success(pageable);
            return Task.CompletedTask;
        }

        private IPageable ResolvePageableArgumentFromQueryString(QueryString queryString)
        {
            var pageNumberString = queryString.GetParameter(_binderConfig.PageParameterName);
            var pageSizeString = queryString.GetParameter(_binderConfig.SizeParameterName);

            var pageNumber = ParseIntOrDefault(pageNumberString, _binderConfig.FallbackPageable.PageNumber);
            var pageSize = ParseIntOrDefault(pageSizeString, _binderConfig.FallbackPageable.PageSize,
                _binderConfig.MaxPageSize);
            
            Sort sort = ResolveSortArgument(queryString);
            if (sort != null) {
                return Pageable.Of(pageNumber, pageSize, sort);
            }

            return Pageable.Of(pageNumber, pageSize);
        }

        private static int ParseIntOrDefault(string parameter, int defaultValue, int upper = int.MaxValue)
        {
            if (!int.TryParse(parameter, out var value)) value = defaultValue;

            value = value < 0 ? 0 : value;
            value = value > upper ? upper : value;

            return value;
        }

        private Sort ResolveSortArgument(QueryString queryString)
        {
            string[] sortParts = queryString.GetParameterValues(_binderConfig.SortParameterName);
            var orders = new List<Order>();
            foreach (var sortPart in sortParts)
            {
                string[] sortSpt = sortPart.Split(_binderConfig.SortDelimiter);
                string property = sortSpt?[0];
                Direction direction = sortSpt != null && sortSpt.Length == 2 && sortSpt[1] == "desc" ? Direction.Desc : Sort.DefaultDirection;
                if (!string.IsNullOrEmpty(property))
                {
                    orders.Add(new Order(direction, property));
                }
            }
            return new Sort(orders);
        }
    }
}

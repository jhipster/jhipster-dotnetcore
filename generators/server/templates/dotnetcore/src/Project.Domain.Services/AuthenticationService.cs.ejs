<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Security.Authentication;
using System.Security.Claims;
using System.Security.Principal;
using System.Threading.Tasks;
using <%= namespace %>.Domain;
using <%= namespace %>.Domain.Services.Interfaces;
using <%= namespace %>.Crosscutting.Exceptions;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Logging;

namespace <%= namespace %>.Domain.Services {
    public class AuthenticationService : IAuthenticationService {
        private readonly ILogger<AuthenticationService> _log;

        private readonly UserManager<User> _userManager;

        public AuthenticationService(ILogger<AuthenticationService> log, UserManager<User> userManager)
        {
            _log = log;
            _userManager = userManager;
        }

        public virtual async Task<IPrincipal> Authenticate(string username, string password)
        {
            //https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.identity.signinmanager-1.passwordsigninasync?view=aspnetcore-2.2
            // => not use because cookie
            //=> https://stackoverflow.com/questions/53854051/usermanager-checkpasswordasync-vs-signinmanager-passwordsigninasync
            //https://github.com/openiddict/openiddict-core/issues/578

            var user = await LoadUserByUsername(username);

            if (!user.Activated) throw new UserNotActivatedException($"User {user.UserName} was not activated.");

            if (await _userManager.CheckPasswordAsync(user, password)) return await CreatePrincipal(user);

            _log.LogDebug("Authentication failed: password does not match stored value");
            throw new InvalidCredentialException("Authentication failed: password does not match stored value");
        }

        private async Task<User> LoadUserByUsername(string username)
        {
            _log.LogDebug($"Authenticating {username}");

            if (new EmailAddressAttribute().IsValid(username)) {
                var userByEmail = await _userManager.FindByEmailAsync(username);
                if (userByEmail == null)
                    throw new UsernameNotFoundException(
                        $"User with email {username} was not found in the database");
                return userByEmail;
            }

            var lowerCaseLogin = username.ToLower(CultureInfo.GetCultureInfo("en-US"));
            var userByLogin = await _userManager.FindByNameAsync(username);
            if (userByLogin == null)
                throw new UsernameNotFoundException($"User {lowerCaseLogin} was not found in the database");
            return userByLogin;
        }

        private async Task<IPrincipal> CreatePrincipal(User user)
        {
            var claims = new List<Claim> {
                new Claim(ClaimTypes.Name, user.UserName)
            };
            var roles = await _userManager.GetRolesAsync(user);
            claims.AddRange(roles.Select(role => new Claim(ClaimTypes.Role, role)));
            var identity = new ClaimsIdentity(claims);
            return new ClaimsPrincipal(identity);
        }
    }
}

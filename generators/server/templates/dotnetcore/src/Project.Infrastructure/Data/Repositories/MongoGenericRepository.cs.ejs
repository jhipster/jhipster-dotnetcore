<%#
 Copyright 2019-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using MongoDB.Bson;
using MongoDB.Driver;
using System;
using System.Threading;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using <%= namespace %>.Domain.Repositories.Interfaces;
using System.Linq.Expressions;
using JHipsterNet.Core.Pagination;
using JHipsterNet.Core.Pagination.Extensions;
using MongoDB.Driver.Linq;
using <%= namespace %>.Domain;

namespace <%= namespace %>.Infrastructure.Data.Repositories
{
    public abstract class MongoGenericRepository<TEntity, TKey> : MongoReadOnlyGenericRepository<TEntity, TKey>, INoSqlGenericRepository<TEntity, TKey>, IDisposable where TEntity : MongoBaseEntity<TKey>
    {
        protected MongoGenericRepository(IMongoDatabaseContext context) : base(context)
        {
        }

        public async Task<TEntity> CreateOrUpdateAsync(TEntity bankAccountTestA)
        {
            bool exists = await Exists(x => x.Id.Equals(bankAccountTestA.Id));

            if (bankAccountTestA.Id != null && exists)
            {
                Update(bankAccountTestA);
            }
            else
            {
                Add(bankAccountTestA);
            }
            return bankAccountTestA;
        }

        public virtual TEntity Update(TEntity entity)
        {
            // _context.AddCommand(async () => await _dbSet.ReplaceOneAsync(Builders<TEntity>.Filter.Eq("_id", obj.Id), obj));
            _dbSet.FindOneAndReplace(m => m.Id.Equals(entity.Id), entity);
            return entity;
        }

        public virtual async Task DeleteByIdAsync(TKey id)
        {
            var objectId = new ObjectId(id.ToString());
            // _context.AddCommand(async () => await _dbSet.DeleteOneAsync(Builders<TEntity>.Filter.Eq("_id", objectId)));
            await _dbSet.DeleteOneAsync(Builders<TEntity>.Filter.Eq("_id", objectId));
        }

        public async Task DeleteAsync(TEntity entity)
        {
            // _context.AddCommand(async () => await _dbSet.DeleteOneAsync(Builders<TEntity>.Filter.Eq("_id", entity.Id)));
            await _dbSet.DeleteOneAsync(Builders<TEntity>.Filter.Eq("_id", entity.Id));
        }

        public virtual TEntity Add(TEntity entity)
        {
            // _context.AddCommand(async () => await _dbSet.InsertOneAsync(entity));
            _dbSet.InsertOne(entity);
            return entity;
        }

        public virtual bool AddRange(params TEntity[] entities)
        {
            // _context.AddCommand(async () => await _dbSet.InsertManyAsync(entities));
            _dbSet.InsertMany(entities);
            return true;
        }

        public virtual bool UpdateRange(params TEntity[] entities)
        {
            foreach (TEntity entity in entities)
                this.Update(entity);
            return true;
        }

        public virtual async Task Clear()
        {
            await _dbSet.DeleteManyAsync(Builders<TEntity>.Filter.Empty);
        }

        public virtual async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
        {
            return await _context.SaveChangesAsync();
        }
    }
}

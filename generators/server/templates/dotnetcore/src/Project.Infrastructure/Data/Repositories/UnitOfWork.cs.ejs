<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using System;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using <%= namespace %>.Domain.Repositories.Interfaces;
using <%= namespace %>.Infrastructure.Data.Extensions;

namespace <%= namespace %>.Infrastructure.Data.Repositories
{
    public class UnitOfWork : IUnitOfWork
    {
        protected readonly DbContext _context;

        public UnitOfWork(DbContext context)
        {
            _context = context;
        }

        public void UpdateState<TEntity>(TEntity entity, EntityState state)
        {
            _context.Entry(entity).State = state;
        }

        public void SetEntityStateModified<TEntiy, TProperty>(TEntiy entity, Expression<Func<TEntiy, TProperty>> propertyExpression) where TEntiy : class where TProperty : class
        {
            _context.Entry(entity).Reference(propertyExpression).IsModified = true;
        }

        public void RemoveNavigationProperty<TEntity, TOwnerEntity>(TOwnerEntity ownerEntity, object id)
            where TEntity : class
            where TOwnerEntity : class
        {
            _context.Set<TEntity>().RemoveNavigationProperty(ownerEntity, id);
        }
        public async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
        {
            using var saveChangeTask = _context.SaveChangesAsync(cancellationToken);
            return await saveChangeTask;
        }

        public DbSet<T> Set<T>(string name = null) where T : class
        {
            return _context.Set<T>(name);
        }

        public void AddGraph<TEntiy>(TEntiy entity) where TEntiy : class
        {
            _context.ChangeTracker.TrackGraph(entity, e => {
                if (e.Entry.IsKeySet) {
                    e.Entry.State = EntityState.Unchanged;
                }
                else {
                    e.Entry.State = EntityState.Added;
                }
            });
        }

        public void Dispose()
        {
            _context?.Dispose();
        }
    }
}

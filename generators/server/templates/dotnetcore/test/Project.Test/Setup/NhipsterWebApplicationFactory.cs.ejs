<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using <%= namespace %>.Crosscutting.Constants;
using <%= namespace %>.Configuration;
using <%= namespace %>.Security;
using <%= namespace %>.Test.Configuration;
using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.TestHost;
using Microsoft.AspNetCore.Mvc.Testing;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using Microsoft.IdentityModel.JsonWebTokens;

namespace <%= namespace %>.Test.Setup {
    public class NhipsterWebApplicationFactory<TEntryPoint> : WebApplicationFactory<TEntryPoint>
        where TEntryPoint : class {
        private IServiceProvider _serviceProvider;
        private ClaimsPrincipal _user { get; set; }

        protected override IWebHostBuilder CreateWebHostBuilder()
        {
            return WebHost.CreateDefaultBuilder()
                          .UseStartup<TEntryPoint>();
        }

        protected override void ConfigureWebHost(IWebHostBuilder builder)
        {
            builder
                .UseSolutionRelativeContentRoot("<%= SERVER_SRC_DIR %><%= solutionName %>")
                .ConfigureServices(services => {
                    services
                        .AddMvc(TestMvcStartup.ConfigureMvcAuthorization());
                    services.Replace(new ServiceDescriptor(typeof(IHttpContextFactory), typeof(MockHttpContextFactory),
                        ServiceLifetime.Transient));
                    services.AddTransient(sp => new MockClaimsPrincipalProvider(_user));
                });
        }

        public TService GetRequiredService<TService>()
        {
            if (_serviceProvider == null) _serviceProvider = Server.Host.Services.CreateScope().ServiceProvider;

            return _serviceProvider.GetRequiredService<TService>();
        }

        public NhipsterWebApplicationFactory<TEntryPoint> WithMockUser(string name = "user",
            IEnumerable<string> roles = null, string authenticationType = "MockAuthenticationType")
        {
            _user = BuildClaimsPrincipal(name, roles, authenticationType);
            return this;
        }

        private static ClaimsPrincipal BuildClaimsPrincipal(string name, IEnumerable<string> roles,
            string authenticationType)
        {
            if (roles == null || !roles.Any()) roles = new HashSet<string> {RolesConstants.USER};

            <%_ if (authenticationType === 'jwt') { _%>
            var claims = new List<Claim> {new Claim(SecurityStartup.UserNameClaimType, name)};
            <%_ } else { _%>
            var claims = new List<Claim> {new Claim(ClaimTypes.Name, name)};
            <%_ } _%>
            claims.AddRange(roles.Select(role => new Claim(ClaimTypes.Role, role)));
            return new ClaimsPrincipal(new ClaimsIdentity(claims.ToArray(), authenticationType));
        }

    }
}

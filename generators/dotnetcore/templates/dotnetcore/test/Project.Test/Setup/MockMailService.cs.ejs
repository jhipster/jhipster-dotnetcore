<%#
 Copyright 2019-2025 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using <%= namespace %>.Domain.Services.Interfaces;
using Microsoft.Extensions.Logging;

namespace <%= namespace %>.Test.Setup;

public class MockMailService(ILogger<MockMailService> logger) : IMailService
{
    private readonly ILogger<MockMailService> _logger = logger;
    public List<(string email, string mailType)> SentEmails { get; } = new();

    private void LogEmailSent(string emailType, string email)
    {
        _logger?.LogInformation($"Mock email of type '{emailType}' would be sent to {email}");
    }

    public Task SendActivationEmail(string email, string name, string activationKey)
    {
        _logger?.LogInformation($"[MockMailService] Sending activation email to user {name}");
        if (string.IsNullOrEmpty(email))
        {
            throw new InvalidOperationException($"{email} cannot be null or empty");
        }
        LogEmailSent("activation", email);
        SentEmails.Add((email, "activation"));
        _logger?.LogInformation($"[MockMailService] Successfully sent activation email to user {email}");
        return Task.CompletedTask;
    }

    public Task SendCreationEmail(string email, string name)
    {
        _logger?.LogInformation($"[MockMailService] Sending creation email to user {name}");
        if (string.IsNullOrEmpty(email))
        {
            throw new InvalidOperationException($"{email} cannot be null or empty");
        }
        LogEmailSent("creation", email);
        SentEmails.Add((email, "creation"));
        _logger?.LogInformation($"[MockMailService] Successfully sent creation email to user {email}");
        return Task.CompletedTask;
    }

    public Task SendPasswordResetMail(string email, string name, string resetKey)
    {
        _logger?.LogInformation($"[MockMailService] Sending password reset email to user {name}");
        if (string.IsNullOrEmpty(email))
        {
            throw new InvalidOperationException($"{email} camnot be null or empty");
        }
        LogEmailSent("reset", email);
        SentEmails.Add((email, "reset"));
        _logger?.LogInformation($"[MockMailService] Successfully sent password reset email to user {email}");
        return Task.CompletedTask;
    }
}
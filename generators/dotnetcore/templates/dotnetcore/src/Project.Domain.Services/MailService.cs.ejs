<%#
 Copyright 2019-2025 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using MimeKit;
using MailKit.Net.Smtp;
using MailKit.Security;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System;
using System.Threading.Tasks;
using <%= namespace %>.Domain.Services.Interfaces;
using <%= namespace %>.Infrastructure.Configuration;

namespace <%= namespace %>.Domain.Services;

public class MailService : IMailService
{
    private readonly SecuritySettings _settings;
    private readonly ILogger<MailService> _logger;

    public MailService(IOptions<SecuritySettings> settings, ILogger<MailService> logger)
    {
        _settings = settings.Value;
        _logger = logger;
    }

    private async Task SendEmailAsync(string to, string subject, string htmlContent)
    {
        var email = new MimeMessage();
        email.From.Add(MailboxAddress.Parse(_settings.Email.From));
        email.To.Add(MailboxAddress.Parse(to));
        email.Subject = subject;

        var builder = new BodyBuilder { HtmlBody = htmlContent };
        email.Body = builder.ToMessageBody();

        try
        {
            using var smtp = new SmtpClient();
            await smtp.ConnectAsync(_settings.Email.Smtp.Host, _settings.Email.Smtp.Port, _settings.Email.Smtp.UseSsl);
            await smtp.AuthenticateAsync(_settings.Email.Smtp.Username, _settings.Email.Smtp.Password);
            await smtp.SendAsync(email);
            await smtp.DisconnectAsync(true);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error sending email. Please check your SMTP settings.");
        }
    }

    public async Task SendPasswordResetMail(string email, string name, string resetKey)
    {
        _logger.LogDebug($"Sending password reset email to {email}");
        var subject = "Password Reset Request";
        var content = $@"
            <h1>Password Reset Request</h1>
            <p>Dear {name},</p>
            <p>You recently requested to reset your password. Click the link below to proceed:</p>
            <p><a href='{_settings.Email.BaseUrl}/account/reset/finish?key={resetKey}'>Reset Password</a></p>
            <p>If you did not request this, please ignore this email.</p>";

        await SendEmailAsync(email, subject, content);
    }

    public async Task SendActivationEmail(string email, string name, string activationKey)
    {
        _logger.LogDebug($"Sending activation email to {email}");
        var subject = "Activate Your Account";
        var content = $@"
            <h1>Account Activation</h1>
            <p>Dear {name},</p>
            <p>Please click on the link below to activate your account:</p>
            <p><a href='{_settings.Email.BaseUrl}/account/activate?key={activationKey}'>Activate Account</a></p>";

        await SendEmailAsync(email, subject, content);
    }

    public async Task SendCreationEmail(string email, string name)
    {
        _logger.LogDebug($"Sending creation email to {email}");
        var subject = "Welcome to Your Account";
        var content = $@"
            <h1>Welcome!</h1>
            <p>Dear {name},</p>
            <p>Your account has been created successfully. Please click the link below to access your account:</p>
            <p><a href='{_settings.Email.BaseUrl}/login'>Login to Your Account</a></p>";

        await SendEmailAsync(email, subject, content);
    }
}

<%#
 Copyright 2019-2023 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using System;
using <%= namespace %>.Infrastructure.Data;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Hosting;
<%_ switch(databaseType) {
    case 'sqllite': _%>
using Microsoft.Data.Sqlite;
    <%_ break;
    case 'mssql': _%>
using Microsoft.Data.SqlClient;
    <%_ break;
    case 'mysql': _%>
using Pomelo.EntityFrameworkCore.MySql.Infrastructure;
using Pomelo.EntityFrameworkCore.MySql.Storage;
    <%_ break;
 } _%>
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using <%= namespace %>.Infrastructure.Configuration;

namespace <%= namespace %>.Configuration;

public static class DatabaseConfiguration
{
    public static IServiceCollection AddDatabaseModule(this IServiceCollection services, IConfiguration configuration)
    {
        <%_ if (databaseType !== 'mongodb') { _%>
        string connectionString = null;
        string databaseUrl = configuration.GetValue<string>("DATABASE_URL");

        if (!String.IsNullOrEmpty(databaseUrl) && Uri.IsWellFormedUriString(databaseUrl, UriKind.RelativeOrAbsolute))
        {
            Console.WriteLine("DATABASE_URL will be used to create the connection string.");
            //  Parse the connection string
            var databaseUri = new Uri(databaseUrl);
            string db = databaseUri.LocalPath.TrimStart('/');
            string[] userInfo = databaseUri.UserInfo.Split(':', StringSplitOptions.RemoveEmptyEntries);

            switch (databaseUri.Scheme)
            {
                case "postgres":
                    connectionString = $"Server={databaseUri.Host};Port={databaseUri.Port};Database={db};User Id={userInfo[0]};Password={userInfo[1]};Integrated Security=true;Pooling=true;MinPoolSize=0;MaxPoolSize=20;";
                    break;
                case "mysql":
                    connectionString = $"Server={databaseUri.Host};Port={databaseUri.Port};Database={db};User={userInfo[0]};Password={userInfo[1]};Pooling=true;MinimumPoolSize=0;MaximumPoolsize=10;";
                    break;
                case "mssql":
                    connectionString = $"Server={databaseUri.Host};Port={databaseUri.Port};Database={db};User={userInfo[0]};Password={userInfo[1]};Trusted_Connection=False;Pooling=true;Encrypt=True;TrustServerCertificate=True;";
                    break;
                case "mongodb":
                    connectionString = $"Server={databaseUri.Host};Port={databaseUri.Port};Database={db};User={userInfo[0]};Password={userInfo[1]};Pooling=true;MinimumPoolSize=0;MaximumPoolsize=10;";
                    break;
                default:
                    Console.WriteLine("It was not possible to determine the database type provided by DATABASE_URL");
                    break;
            }
        }
        else
        {
            connectionString = configuration.GetConnectionString("AppDbContext");
        }

        <%_ } _%>
        <%_ switch(databaseType) {
            case 'sqllite': _%>
        var entityFrameworkConfiguration = configuration.GetSection("EntityFramework");
        var sqliteConnection = new SqliteConnection(new SqliteConnectionStringBuilder
        {
            DataSource = entityFrameworkConfiguration["DataSource"]
        }.ToString());
        services.AddDbContext<ApplicationDatabaseContext>(context => { context.UseSqlite(sqliteConnection); });

        services.AddScoped<DbContext>(provider => provider.GetService<ApplicationDatabaseContext>());
            <%_ break;
            case 'mssql': _%>
        services.AddDbContext<ApplicationDatabaseContext>(options => options.UseSqlServer(connectionString));

        services.AddScoped<DbContext>(provider => provider.GetService<ApplicationDatabaseContext>());
            <%_ break;
            case 'postgresql': _%>
        // Opt out of the new timestamp mapping logic for postgres (https://www.npgsql.org/efcore/release-notes/6.0.html#opting-out-of-the-new-timestamp-mapping-logic)
        AppContext.SetSwitch("Npgsql.EnableLegacyTimestampBehavior", true);
        services.AddDbContext<ApplicationDatabaseContext>(context => { context.UseNpgsql(connectionString); });

        services.AddScoped<DbContext>(provider => provider.GetService<ApplicationDatabaseContext>());
            <%_ break;
            case 'mysql': _%>
        services.AddDbContext<ApplicationDatabaseContext>(options =>
            options.UseMySql(connectionString, new MySqlServerVersion(new Version(8, 0, 19)))
        );

        services.AddScoped<DbContext>(provider => provider.GetService<ApplicationDatabaseContext>());
            <%_ break;
            case 'mongodb': _%>
        services.Configure<MongoDatabaseConfig>(
            configuration.GetSection(nameof(MongoDatabaseConfig)));
        services.AddSingleton<IMongoDatabaseConfig>(sp =>
            sp.GetRequiredService<IOptions<MongoDatabaseConfig>>().Value);
        services.AddSingleton<IMongoDatabaseContext, MongoDatabaseContext>();
            <%_ break;
            case 'mssql': _%>
        services.AddDbContext<ApplicationDatabaseContext>(options => options.UseSqlServer(connectionString));

        services.AddScoped<DbContext>(provider => provider.GetService<ApplicationDatabaseContext>());
            <%_ break;
            case 'postgresql': _%>
        // Opt out of the new timestamp mapping logic for postgres (https://www.npgsql.org/efcore/release-notes/6.0.html#opting-out-of-the-new-timestamp-mapping-logic)
        AppContext.SetSwitch("Npgsql.EnableLegacyTimestampBehavior", true);
        services.AddDbContext<ApplicationDatabaseContext>(context => { context.UseNpgsql(connectionString); });

        services.AddScoped<DbContext>(provider => provider.GetService<ApplicationDatabaseContext>());
            <%_ break;
            case 'oracle': _%>
        services.AddDbContext<ApplicationDatabaseContext>(options =>
            options.UseOracle(connectionString));

        services.AddScoped<DbContext>(provider => provider.GetService<ApplicationDatabaseContext>());
            <%_ break;
        } _%>

        return services;
    }

    public static IApplicationBuilder UseApplicationDatabase(this IApplicationBuilder app, IHostEnvironment environment)
    {
        <%_ if (databaseType !== 'mongodb') { _%>
        if (environment.IsDevelopment() || environment.IsProduction())
        {
            using (var scope = app.ApplicationServices.CreateScope())
            {
                var context = scope.ServiceProvider.GetRequiredService<ApplicationDatabaseContext>();
                context.Database.OpenConnection();
                context.Database.EnsureCreated();
            }
        }

        <%_ } _%>
        return app;
    }
}

<%#
 Copyright 2013-2023 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%#
 This is a fragment file, it will be merged into to root template if available.
 EJS fragments will process % delimiter tags in template and & delimiter tags in the merge process.
-%>
<&_ if (fragment.introSection) { -&>
This application was generated using JHipster <%= jhipsterVersion %> and JHipster .Net Core <%= jhipsterDotnetVersion %>, you can find documentation and help at https://jhipsternet.readthedocs.io/en/latest/index.html and  [<%= documentationArchiveUrl %>](<%= documentationArchiveUrl %>).

<&_ } -&>

<&_ if (fragment.structureSection) { -&>
Node is required for generation and recommended for development. `package.json` is always generated for a better development experience with prettier, commit hooks, scripts and so on.

In the project root, JHipster generates configuration files for tools like git, prettier, eslint, husky, and others that are well known and you can find references in the web.

- `.yo-rc.json` - Yeoman configuration file
JHipster configuration is stored in this file at `generator-jhipster` key. You may find `generator-jhipster-*` for specific blueprints configuration.
- `.yo-resolve` (optional) - Yeoman conflict resolver
Allows to use a specific action when conflicts are found skipping prompts for files that matches a pattern. Each line should match `[pattern] [action]` with pattern been a [Minimatch](https://github.com/isaacs/minimatch#minimatch) pattern and action been one of skip (default if ommited) or force. Lines starting with `#` are considered comments and are ignored.
- `.jhipster/*.json` - JHipster entity configuration files
- `<%- dockerServicesDir %>` - Docker configurations for the application and services that the application depends on
- `<%- clientRootDir %>` - Web Application folder

<&_ } -&>

<&_ if (fragment.developmentSection) { -&>
  <%_ if (skipClient) { _%>
To start your application in the dev profile, run:

```
dotnet run --verbosity normal --project ./src/<%= pascalizedBaseName %>/<%= pascalizedBaseName %>.csproj
```

<%_ } _%>
<%_ if (!skipClient && clientFramework === "Blazor") { _%>

Before you can build this project, you need to verify if [libman](https://github.com/aspnet/LibraryManager) and [webcompiler](https://github.com/excubo-ag/WebCompiler) are installed. (If the application is generated, the generator installed this tools for you)

If not, run

```bash
dotnet tool install -g Microsoft.Web.LibraryManager.Cli
dotnet tool install -g Excubo.WebCompiler
```

<%_ } _%>

<%_ if (skipClient || clientFramework === "Blazor") { _%>
To start your application in the Debug configuration, simply run:

```bash
dotnet run --verbosity normal --project ./src/<%= pascalizedBaseName %>/<%= pascalizedBaseName %>.csproj
```
<%_ } _%>
<%_ if (!skipClient && clientFramework === "Blazor") { _%>

and

```bash
dotnet run --verbosity normal --project ./src/client/<%= pascalizedBaseName %>.Client/<%= pascalizedBaseName %>.Client.csproj
```

You can also use the **hotreload**

For the backend
```bash
dotnet watch --project ./src/<%= pascalizedBaseName %>/<%= pascalizedBaseName %>.csproj run --verbosity normal
```
For the frontend
```bash
dotnet watch --project ./src/client/<%= pascalizedBaseName %>.Client/<%= pascalizedBaseName %>.Client.csproj run --verbosity normal
```
<%_ } _%>
<%_ if (!skipClient && clientFramework !== "Blazor" && clientFramework !== "Xamarin") { _%>
Before you can build this project, you must install and configure the following dependencies on your machine:

1. [Node.js][]: We use Node to run a development web server and build the project.
   Depending on your system, you can install Node either from source or as a pre-packaged bundle.

After installing Node, you should be able to run the following command to install development tools.
You will only need to run this command when dependencies change in [package.json](package.json).

In ./src/<%= pascalizedBaseName %>/ClientApp run

    npm install

We use npm scripts and [Webpack][] as our build system.

Run the following commands in two separate terminals to create a blissful development experience where your browser
auto-refreshes when files change on your hard drive.

    
    npm --prefix ./src/<%= pascalizedBaseName %>/ClientApp start

npm is also used to manage CSS and JavaScript dependencies used in this application. You can upgrade dependencies by
specifying a newer version in [package.json](package.json). You can also run `npm update` and `npm install` to manage dependencies.
Add the `help` flag on any command to see how you can use it. For example, `npm help update`.

The `npm --prefix ./src/<%= pascalizedBaseName %>/ClientApp run` command will list all of the scripts available to run for this project.

  <%_ } _%>

<&_ } -&>

<&_ if (fragment.testingSection) { -&>
### .Net Backend tests

To launch your application's tests, run:

```
dotnet test --verbosity normal
```

<&_ } -&>

<&_ if (fragment.productionSection) { -&>
### .Net Production builds

To build the artifacts and optimize the <%= baseName %> application for production, run:

```
cd ./src/<%= pascalizedBaseName %>
rm -rf ./src/<%= pascalizedBaseName %>/wwwroot
dotnet publish --verbosity normal -c Release -o ./app/out ./<%= pascalizedBaseName %>.csproj
```

The `./src/<%= pascalizedBaseName %>/app/out` directory will contain your application dll and its depedencies.

<&_ } -&>

<&_ if (fragment.othersSection) { -&>

### Code style / formatting

To format the dotnet code, run

```
dotnet format
```

### Code quality

By Script :

1. Run Sonar in container : ```docker compose -f ./docker/sonar.yml up -d```

2. Wait container was up Run ```SonarAnalysis.ps1``` and go to http://localhost:9001

Manually :

1. Run Sonar in container : ```docker compose -f ./docker/sonar.yml up -d```

2. Install sonar scanner for .net :

 ```dotnet tool install --global dotnet-sonarscanner```

3. Run ```dotnet sonarscanner begin /d:sonar.login=admin /d:sonar.password=admin /k:"<%= pascalizedBaseName %>" /d:sonar.host.url="http://localhost:9001" /s:"`pwd`/SonarQube.Analysis.xml"```

4. Build your application : ```dotnet build```

5. Publish sonar results : ```dotnet sonarscanner end /d:sonar.login=admin /d:sonar.password=admin```

6. Go to http://localhost:9001

### Monitoring

1. Run container (uncomment chronograf and kapacitor if you would use it): ```docker compose -f ./docker/monitoring.yml up -d```

2. Go to http://localhost:3000 (or http://localhost:8888 if you use chronograf)

3. (Only for chronograf) Change influxdb connection string by ```YourApp-influxdb```

4. (Only for chronograf) Change kapacitor connection string by ```YourApp-kapacitor```

5. (Only for chronograf) You can now add dashboard (like docker), see your app log in Cronograf Log viewer and send alert with kapacitor

### Build a Docker image

You can also fully dockerize your application and all the services that it depends on. To achieve this, first build a docker image of your app by running:

```bash
docker build -f ./Dockerfile-Back -t <%= baseName.toLowerCase() %> .
```

<%_ if (!skipClient && clientFramework === "Blazor") { _%>

```bash
docker build -f ./Dockerfile-Front -t <%= baseName.toLowerCase() %>-front .
```

<%_ } _%>

Then run:

```bash
docker run -p 8080:8080 <%= baseName.toLowerCase() %>
```

<%_ if (!skipClient && clientFramework === "Blazor") { _%>

```bash
docker run -p 8081:80 -e ServerUrl=https://localhost:8080 <%= baseName.toLowerCase() %>-front
```

<%_ } _%>

Or you can simply run :

```bash
docker compose -f .\docker\app.yml build
```

And

```bash
docker compose -f .\docker\app.yml up
```

<&_ } -&>

<&_ if (fragment.referenceSection) { -&>
<&_ } -&>

<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using <%= namespace %>.Domain;
<%_
let hasEnumField = false;
entities.forEach(entity => {
    fields.forEach(field => {
        if (field.fieldIsEnum) {
            hasEnumField = true;
        }
    });
});
if (hasEnumField) { _%>
using <%= namespace %>.Crosscutting.Enums;
<%_ } _%>
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

namespace <%= namespace %>.Data {
    <%_ if (authenticationType === 'jwt') { _%>
    public class ApplicationDatabaseContext : IdentityDbContext<
        User, Role, string,
        IdentityUserClaim<string>,
        UserRole,
        IdentityUserLogin<string>,
        IdentityRoleClaim<string>,
        IdentityUserToken<string>
    > {
    <%_ } else { _%>
    public class ApplicationDatabaseContext : DbContext
    {
    <%_ } _%>
        public ApplicationDatabaseContext(DbContextOptions<ApplicationDatabaseContext> options) : base(options)
        {
        }

        <%_ entities.forEach(entity => {
            if(entity.name.toUpperCase() !== entityClass.toUpperCase()) { _%>
        public DbSet<<%= entity.name %>> <%= pluralize(entity.name) %> { get; set; }
                <%_ entity.definition.relationships.forEach(relationship => {
                    if (relationship.relationshipType === 'many-to-many') {
                        if (relationship.ownerSide) {
                            let relationshipNamePascalized = toPascalCase(relationship.relationshipName);
                            let otherEntityRelationshipNamePascalized = toPascalCase(relationship.otherEntityRelationshipName);
                            let joinEntityClassNamePascalized = otherEntityRelationshipNamePascalized + relationshipNamePascalized; _%>
        public DbSet<<%= joinEntityClassNamePascalized %>> <%= pluralize(joinEntityClassNamePascalized) %> { get; set; }
                        <%_ }
                    }
                });
            }
        }); _%>
        public DbSet<<%= pascalizedEntityClass %>> <%= pascalizedEntityClassPlural %> { get; set; }
        <%_ relationships.forEach(relationship => {
            if (relationship.relationshipType === 'many-to-many') {
                if (relationship.ownerSide) {; _%>
        public DbSet<<%= relationship.joinEntityNamePascalized %>> <%= relationship.joinEntityFieldNamePascalizedPlural %> { get; set; }
                <%_ }
            }
        })_%>

        protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);
            <%_ if (authenticationType === 'jwt') { _%>
            builder.Entity<UserRole>(userRole => {
                userRole.HasKey(ur => new {ur.UserId, ur.RoleId});

                userRole.HasOne(ur => ur.Role)
                    .WithMany(r => r.UserRoles)
                    .HasForeignKey(ur => ur.RoleId)
                    .IsRequired();

                userRole.HasOne(ur => ur.User)
                    .WithMany(r => r.UserRoles)
                    .HasForeignKey(ur => ur.UserId)
                    .IsRequired();
            });

            builder.Entity<User>()
                .HasMany(e => e.UserRoles)
                .WithOne()
                .HasForeignKey(e => e.UserId)
                .IsRequired()
                .OnDelete(DeleteBehavior.Cascade);
            <%_ } _%>
            <%_ entities.forEach(entity => {
                fields.forEach(field => {
                    if (entity.name == entityClass && field.fieldIsEnum){ _%>
            builder.Entity<<%= entity.name %>>()
                .Property(e => e.<%= field.fieldNamePascalized %>)
                .HasConversion<string>();
                <%_ }
                });
                if(entity.name.toUpperCase() !== entityClass.toUpperCase()) {
                    entity.definition.relationships.forEach(relationship => {
                        if (relationship.relationshipType === 'many-to-many') {
                            if (relationship.ownerSide) {
                                let relationshipNamePascalized = toPascalCase(relationship.relationshipName);
                                let otherEntityRelationshipNamePascalized = toPascalCase(relationship.otherEntityRelationshipName);
                                let joinEntityClassNamePascalized = otherEntityRelationshipNamePascalized + relationshipNamePascalized;
                                let entityClassNamePascalized = entity.name;
                                let otherEntityClassNamePascalized = toPascalCase(relationship.otherEntityName);
                                let ownerRelationshipFieldName = entityClassNamePascalized;
                                let nonOwnerRelationshipFieldName = otherEntityClassNamePascalized; _%>
            builder.Entity<<%= joinEntityClassNamePascalized %>>()
                .HasKey(t => new { t.<%= ownerRelationshipFieldName %>Id, t.<%= nonOwnerRelationshipFieldName %>Id });

                            <%_ }
                        }
                    });
                }
            });
            relationships.forEach(relationship => {
                if (relationship.relationshipType === 'many-to-many') {
                    if (relationship.ownerSide) {
                        let ownerRelationshipFieldName = pascalizedEntityClass;
                        let nonOwnerRelationshipFieldName = relationship.otherEntityNamePascalized; _%>
            builder.Entity<<%= relationship.joinEntityNamePascalized %>>()
                .HasKey(t => new { t.<%= ownerRelationshipFieldName %>Id, t.<%= nonOwnerRelationshipFieldName %>Id });

                    <%_ }
                }
            })_%>
        }
    }
}

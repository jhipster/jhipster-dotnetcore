<%#
 Copyright 2019-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_ let importJsonIgnore = false;
const hasManyToMany = entityClassHasManyToMany;
const entityTableName = snakeCasedEntityClass;
const entityClassName = pascalizedEntityClass;
const entityVariableName = camelCasedEntityClass; _%>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
<%_
let hasEnumField = false;
fields.forEach(field => {
        if (field.fieldIsEnum) {
            hasEnumField = true;
        }
    });
if (hasEnumField) { _%>
using <%= namespace %>.Crosscutting.Enums;
<%_ } _%>
<%_ if (importJsonIgnore === true || hasManyToMany) { _%>
using Newtonsoft.Json;
<%_ } _%>

namespace <%= namespace %>.Domain
{
    [Table("<%= entityTableName %>")]
    public class <%= entityClassName %>
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public long Id { get; set; }

        <%_ for (idx in fields){
            if (fields[idx].id) continue;
            let required = false;
            const fieldValidate = fields[idx].fieldValidate;
            const fieldValidateRules = fields[idx].fieldValidateRules;
            const fieldType = equivalentCSharpType(fields[idx].fieldType);
            const fieldNamePascalized = fields[idx].fieldNamePascalized;
            if (fieldValidate === true) {
                if (fieldValidateRules.includes('required')) {
                    required = true;
                }
            }
            if (required) { _%>
        [Required]
            <%_ } _%>
            <%_ if (fields[idx].fieldIsEnum) { _%>
        public <%= fields[idx].fieldType %> <%= fieldNamePascalized %> { get; set; }
                <%_ } else { _%>
        public <%= fieldType %> <%= fieldNamePascalized %> { get; set; }
            <%_ } _%>
        <%_ }
        for (idx in relationships) {
            const relationshipType = relationships[idx].relationshipType;
            const relationshipRequired = relationships[idx].relationshipRequired;
            const otherEntityNamePascalized = relationships[idx].otherEntityNamePascalized;
            const relationshipFieldNamePascalizedPlural = relationships[idx].relationshipFieldNamePascalizedPlural;
            const relationshipFieldNamePascalized = relationships[idx].relationshipFieldNamePascalized;
            if (relationshipType === 'one-to-one') {
                if(otherEntityNamePascalized === 'User') { _%>
        public string UserId { get; set; }
                <%_ } else { _%>
        public long? <%= relationshipFieldNamePascalized %>Id { get; set; }
                <%_ } _%>

        public <%= otherEntityNamePascalized %> <%= relationshipFieldNamePascalized %> { get; set; }
<%_ }
            if(relationshipType === 'one-to-many') { _%>
        public IList<<%= otherEntityNamePascalized %>> <%= relationshipFieldNamePascalizedPlural %> { get; set; } = new List<<%= otherEntityNamePascalized %>>();
            <%_  } else if (relationshipType === 'many-to-one') {
                if (relationshipRequired) { _%>
        [Required]
                <%_ }
                if(otherEntityNamePascalized === 'User') { _%>
        public string UserId { get; set; }
                <%_ } else { _%>

        public long? <%= relationshipFieldNamePascalized %>Id { get; set; }
                <%_ } _%>
        public <%= otherEntityNamePascalized %> <%= relationshipFieldNamePascalized %> { get; set; }
<% } else if (relationshipType === 'many-to-many') {
                const ownerSide = relationships[idx].ownerSide; _%>
                <%_ if (!ownerSide) { _%>
        [JsonIgnore]
                <%_ } _%>
        public IList<<%= otherEntityNamePascalized %>> <%= relationshipFieldNamePascalizedPlural %> { get; set; } = new List<<%= otherEntityNamePascalized %>>();
<%_ } _%>
        <%_ } _%>

        // jhipster-needle-entity-add-field - JHipster will add fields here, do not remove

        public override bool Equals(object obj)
        {
            if (this == obj) return true;
            if (obj == null || GetType() != obj.GetType()) return false;
            var <%= entityVariableName %> = obj as <%= entityClassName %>;
            if (<%= entityVariableName %>?.Id == null || <%= entityVariableName %>?.Id == 0 || Id == 0) return false;
            return EqualityComparer<long>.Default.Equals(Id, <%= entityVariableName %>.Id);
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(Id);
        }

        public override string ToString()
        {
            return "<%= entityClassName %>{" +
                    $"ID='{Id}'" +
            <%_ for (idx in fields) {
                if (fields[idx].id) continue;
                const fieldNamePascalized = fields[idx].fieldNamePascalized; _%>
                    $", <%= fieldNamePascalized %>='{<%= fieldNamePascalized %>}'" +
            <%_ } _%>
                    "}";
        }
    }
}

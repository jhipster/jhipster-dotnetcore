<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const serviceClassName = entityClass + 'Service';
const serviceInterface = 'I' + serviceClassName;
_%>
using System.Threading.Tasks;
using JHipsterNet.Core.Pagination;
using <%= namespace %>.Domain.Services.Interfaces;
using <%= namespace %>.Domain.Repositories.Interfaces;
using Microsoft.EntityFrameworkCore;

namespace <%= namespace %>.Domain.Services {
    public class <%= serviceClassName %> : <%= serviceInterface %> {
        protected readonly I<%= pascalizedEntityClass %>Repository  _<%= camelCasedEntityClass %>Repository;

        public <%= serviceClassName %>(I<%= pascalizedEntityClass %>Repository <%= camelCasedEntityClass %>Repository)
        {
            _<%= camelCasedEntityClass %>Repository = <%= camelCasedEntityClass %>Repository;
        }

        public virtual async Task<<%= pascalizedEntityClass %>> Save(<%= pascalizedEntityClass %> <%= camelCasedEntityClass %>)
        {
            await _<%= camelCasedEntityClass %>Repository.CreateOrUpdateAsync(<%= camelCasedEntityClass %>);
            await _<%= camelCasedEntityClass %>Repository.SaveChangesAsync();
            return <%= camelCasedEntityClass %>;
        }

        public virtual async Task<IPage<<%= pascalizedEntityClass %>>> FindAll(IPageable pageable)
        {
            var page = await _<%= camelCasedEntityClass %>Repository.QueryHelper()
            <%_ relationships.forEach( relationship => {
                if (relationship.relationshipType === 'many-to-one' || relationship.relationshipType === 'one-to-one') { _%>
                .Include(<%= camelCasedEntityClass %> => <%= camelCasedEntityClass %>.<%= relationship.relationshipFieldNamePascalized %>)
                <%_ }
            }); _%>            
                .GetPageAsync(pageable);
            return page;
        }

        public virtual async Task<<%= pascalizedEntityClass %>> FindOne(long id)
        {
            var result = await _<%= camelCasedEntityClass %>Repository.QueryHelper()
            <%_ relationships.forEach( relationship => {
                if (relationship.relationshipType === 'many-to-one' || relationship.relationshipType === 'one-to-one') { _%>
                .Include(<%= camelCasedEntityClass %> => <%= camelCasedEntityClass %>.<%= relationship.relationshipFieldNamePascalized %>)
                <%_ } else if (relationship.relationshipType === 'many-to-many' && relationship.ownerSide) { _%>
                .Include(<%= camelCasedEntityClass %> => <%= camelCasedEntityClass %>.<%= relationship.relationshipFieldNamePascalizedPlural %>)
                <%_ }
            }); _%>
                .GetOneAsync(<%= camelCasedEntityClass %> => <%= camelCasedEntityClass %>.Id == id);
            return result;
        }

        public virtual async Task Delete(long id)
        {
            await _<%= camelCasedEntityClass %>Repository.DeleteByIdAsync(id);
            await _<%= camelCasedEntityClass %>Repository.SaveChangesAsync();
        }
    }
}

<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using JHipsterNet.Core.Pagination;
using JHipsterNet.Core.Pagination.Extensions;
using <%= namespace %>.Domain;
using <%= namespace %>.Domain.Repositories.Interfaces;
using <%= namespace %>.Infrastructure.Data.Extensions;

namespace <%= namespace %>.Infrastructure.Data.Repositories
{
    public class <%= pascalizedEntityClass %>Repository : GenericRepository<<%= pascalizedEntityClass %>>, I<%= pascalizedEntityClass %>Repository
    {
        public <%= pascalizedEntityClass %>Repository(IUnitOfWork context) : base(context) 
        {
        }

        public override async Task<<%= pascalizedEntityClass %>> CreateOrUpdateAsync(<%= pascalizedEntityClass %> <%= camelCasedEntityClass %>)
        {
            bool exists = await Exists(x => x.Id == <%= camelCasedEntityClass %>.Id);

            <%_ relationships.forEach( relationship => {
                    if (relationship.otherEntityNamePascalized === 'User' && relationship.relationshipType !== 'many-to-many') { _%>
            <%= camelCasedEntityClass %>.UserId = <%= camelCasedEntityClass %>.User?.Id;
            <%= camelCasedEntityClass %>.User = null; 
                    <%_ }
            }); _%>
            if (<%= camelCasedEntityClass %>.Id != 0 && exists) {
                <%_ relationships.forEach( relationship => {
                    if (relationship.relationshipType === 'many-to-many' && relationship.ownerSide) { _%>
                await RemoveManyToManyRelationship("<%= relationship.joinEntityFieldNamePascalizedPlural %>", "<%= relationship.otherEntityRelationshipNamePascalizedPlural %>Id", "<%= relationship.relationshipFieldNamePascalizedPlural %>Id", <%= camelCasedEntityClass %>.Id, <%= camelCasedEntityClass %>.<%= relationship.relationshipFieldNamePascalizedPlural %>.Select(x => x.Id).ToList());
                        <%_ }
                }); _%>                
                Update(<%= camelCasedEntityClass %>);
                <%_ let first = true;
                let suffix = 0;
                relationships.forEach( relationship => {
                    if (!relationship.relationshipValidateRules || !relationship.relationshipValidateRules.includes('required')) {
                        if (relationship.relationshipType === 'one-to-one' || relationship.relationshipType === 'many-to-one') {
                            if (first) { _%>
                /* Force the reference navigation property to be in "modified" state.
                This allows to modify it with a null value (the field is nullable).
                This takes into consideration the case of removing the association between the two instances. */
                                <%_ first = false;
                            } _%>
                _context.SetEntityStateModified(<%= camelCasedEntityClass %>, <%= camelCasedEntityClass + suffix %> => <%= camelCasedEntityClass + suffix %>.<%= relationship.relationshipFieldNamePascalized %>);
                    <%_ }
                    }
                }); _%>
            } else {
                <%_ if (relationships.length != 0) { _%>
                _context.AddGraph(<%= camelCasedEntityClass %>);
                <%_ } else { _%>
                Add(<%= camelCasedEntityClass %>);
                <%_ } _%>
            }

            return <%= camelCasedEntityClass %>;
        }
    }
}
